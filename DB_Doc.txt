class User:
    Функция get_all_users(cls)

    Описание:
        Эта функция возвращает всех пользователей из базы данных.

    Аргументы:
        Не нужны

    Возвращаемое значение:
        Список объектов класса, представляющих всех пользователей в базе данных.

    Пример использования:
        all_users = User.get_all_users()
        for user in all_users:
            print(user.username, user.email)

    Пример ответа:
        [
            {
                telegram_id: 456345,
                first_name: "Alice",
                last_name: "Monro",
                patronymic: "Smith",
                address: "ул. Пушкина 49/А",
                apartment: 345,
                residential_complex: "Гайва Парк",
                phone_number: "7999999999",
                email: "alice@gmail.com",
                image: {
                    img1: "./images/image1.png",
                    ...
                },
                role: {
                    role: "Собственник"
                },
                is_confirmed: True
            },
            {
                ...
            }
        ]

    ----------------------------

    Функция get_all_telegram_ids(cls)

    Описание:
        Эта функция возвращает список всех Telegram идентификаторов пользователей из базы данных.

    Аргументы:
        Не нужны

    Возвращаемое значение:
        Список числовых значений, представляющих Telegram идентификаторы всех пользователей в базе данных.

    Пример использования:
        telegram_ids = User.get_all_telegram_ids()
        for telegram_id in telegram_ids:
            print(telegram_id)

    Пример ответа:

        [45634563, 3456345, 345634]

    ------------------------------

    Функция delete_user_by_id(cls, telegram_id)

    Описание:
        Эта функция удаляет пользователя из базы данных по его Telegram идентификатору.

    Аргументы:
        telegram_id (int): Telegram идентификатор пользователя, которого необходимо удалить.

    Возвращаемое значение:
        - True, если пользователь успешно удален.
        - False, если пользователь с указанным Telegram идентификатором не найден.

    Пример использования:
        deleted = User.delete_user_by_id(123456789)
        if deleted:
            print("Пользователь успешно удален")
        else:
            print("Пользователь с указанным Telegram идентификатором не найден")

    Примечания:
        - В случае успеха, изменения будут сохранены в базе данных с помощью session.commit().
        - В случае неудачи (если пользователь с указанным Telegram идентификатором не найден), функция вернет False.

    ------------------------

    Функция get_user_by_id(cls, telegram_id)

    Описание:
        Эта функция возвращает пользователя из базы данных по его Telegram идентификатору.

    Аргументы:
        telegram_id (int): Telegram идентификатор пользователя, которого необходимо найти.

    Возвращаемое значение:
        - Объект класса, представляющий пользователя, если пользователь с указанным Telegram идентификатором найден.
        - None, если пользователь с указанным Telegram идентификатором не найден.

    Пример использования:
        user = User.get_user_by_id(123456789)
        if user:
            print("Имя пользователя:", user.username)
            print("Email пользователя:", user.email)
        else:
            print("Пользователь с указанным Telegram идентификатором не найден")

    Пример ответа такой же, как в get_all_users()

    -----------------------------

    Функция update_user_by_id(cls, telegram_id, updated_data)

    Описание:
        Эта функция обновляет данные пользователя в базе данных по его Telegram идентификатору.

    Аргументы:
        telegram_id (int): Telegram идентификатор пользователя, данные которого необходимо обновить.
        updated_data (dict): Словарь с обновленными данными пользователя. Ключи словаря соответствуют атрибутам пользователя.

    Возвращаемое значение:
        - True, если обновление прошло успешно.
        - False, если пользователь с указанным Telegram идентификатором не найден.

    Пример использования:
        updated_data = {'email': 'new_email@example.com', 'username': 'new_username'}
        updated = User.update_user_by_id(123456789, updated_data)
        if updated:
            print("Данные пользователя успешно обновлены")
        else:
            print("Пользователь с указанным Telegram идентификатором не найден")

    Примечания:
        - В случае успеха, изменения будут сохранены в базе данных с помощью session.commit().
        - В случае неудачи (если пользователь с указанным Telegram идентификатором не найден), функция вернет False.

    -------------------------------

    Функция get_all_unconfirmed_users(cls)

    Описание:
        Эта функция возвращает всех неподтвержденных пользователей из базы данных.

    Аргументы:
        Не нужны

    Возвращаемое значение:
        Запрос SQLAlchemy, который фильтрует пользователей с атрибутом is_confirmed равным False.

    Пример использования:
        unconfirmed_users_query = User.get_all_unconfirmed_users()
        unconfirmed_users = unconfirmed_users_query.all()
        for user in unconfirmed_users:
            print(user.username, user.email)

    Пример ответа - как в get_all_users, только с полями is_confirmed == False

    -------------------------------

    Функция confirm_user_by_id(cls, telegram_id)

    Описание:
        Эта функция подтверждает пользователя по его Telegram идентификатору, устанавливая атрибут is_confirmed в значение True.

    Аргументы:
        telegram_id (int): Telegram идентификатор пользователя, которого необходимо подтвердить.

    Возвращаемое значение:
        - True, если пользователь успешно подтвержден.
        - None, если пользователь с указанным Telegram идентификатором не найден.

    Пример использования:
        confirmed = User.confirm_user_by_id(123456789)
        if confirmed:
            print("Пользователь успешно подтвержден")
        else:
            print("Пользователь с указанным Telegram идентификатором не найден")

    ---------------------------

    Метод create_user(cls, user_data)

    Описание:
        Создает нового пользователя в базе данных на основе предоставленных данных и возвращает созданный объект пользователя.

    Аргументы:
        cls (класс): Класс, к которому принадлежит метод (в данном случае, это класс, в котором определен метод).
        user_data (dict): Словарь с данными нового пользователя. Ключи словаря соответствуют атрибутам пользователя.

    Возвращаемое значение:
        Объект класса, представляющий нового пользователя, который был успешно создан и сохранен в базе данных.

    Пример использования:
        user_data = {
            'telegram_id': 456345,
            'first_name': "Alice",
            'last_name': "Monro",
            'patronymic': "Smith",
            'address': "ул. Пушкина 49/А",
            'apartment': 345,
            'residential_complex': "Гайва Парк",
            'phone_number': "7999999999",
            'email': "alice@gmail.com",
            'image': {
                'img1': "./images/image1.png",
                # ...
            },
            'role_id': 1,
            'is_confirmed': True
        }
        new_user = User.create_user(user_data)
        print("Новый пользователь создан с ID:", new_user.id)

    Примечания:
        - Данный метод создает нового пользователя на основе предоставленных данных.
        - Метод принимает словарь `user_data`, в котором каждый ключ представляет атрибут пользователя (например, 'telegram_id', 'first_name' и так далее).
        - В примере `user_data` выше, показана структура словаря с примером данных пользователя.

    ---------------------------------------------------------------------------------------------------


class UserRole:

    Метод get_all(cls)

    Описание:
        Возвращает все роли пользователей с id и названием роли

    Пример использования:
        all_user_roles = UserRole.get_all()

----------------------------------

    Метод get_by_id(cls, role_id)

    Описание:
        Вощвращает название роли по ее id

----------------------------------

    Метод create_role(cls, role_name)

    Описание:
        Создает новую роль с новым названием. id - автоинкрементируется

------------------------------------------------------------------------------------------------------

class Employer - система работы такая же, как и с User

------------------------------------------------------------------------------------------------------

class EmployerRole - система работы такая же, как и с UserRole

----------------------------------------------------------------------------------------------------------------

class Ticket:

    Метод get_all(cls)

    Описание:
        Метод возвращает все обращения к сотрудникам УК

    Пример ответа:

        [
            {
                ticket_id: 1,
                user_id: 4352345,
                ticket_type: {
                    type??: "Технические проблемы"
                },
                is_solved: 1,
                date: 23-11-2023,
                time: время,
                details: "Помогите, вызовите сантехника!!"
            },
            {
                ...
            }
        ]

--------------------------------
    Метод delete_by_id

    Описание:
        Метод удаляет обращение по id обращения.

    Пример использования:
        deleted_ticket = await Ticket.delete_by_id(4)

    Пример ответа
        True/False

-------------------------------

    Метод get_by_id

    Описание:
        Удаление обращения по его id

    Пример использования:
        ticket = await Ticket.get_by_id(4)

    Пример ответа
        Как в get_all()

-----------------------------------

    Остальные методы по аналогии с User и тд

-----------------------------------------------------------

class TicketType - по аналогии с UserRole и тд

-----------------------------------------------------------
